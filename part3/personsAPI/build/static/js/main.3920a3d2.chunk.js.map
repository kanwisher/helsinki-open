{"version":3,"sources":["components/Person.js","components/Persons.js","components/Filter.js","services/phonebook.js","components/PersonForm.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Person","person","id","name","number","deleteClicked","onClick","Persons","persons","filter","filteredPersons","toLowerCase","includes","trim","length","map","key","Filter","setFilter","type","value","onChange","e","target","returnData","res","data","axios","get","then","newObject","post","delete","put","PersonForm","newName","newPhone","setNewName","setNewPhone","setPersons","setMessage","preventDefault","trimmedName","existingUser","find","content","newContact","window","confirm","updatedUser","phonebookService","console","log","setTimeout","Notification","message","className","App","useState","popMessage","time","useEffect","catch","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.3920a3d2.chunk.js","sourcesContent":["import React from 'react'\n\nconst Person = ({person: { id, name, number }, deleteClicked }) => {\n  return (\n    <>\n      <li>{name} {number}</li>\n      <button onClick={() => deleteClicked(id)}>delete</button>\n    </>\n  )\n}\n\nexport default Person","import React from 'react'\nimport Person from './Person'\n\nconst Persons = ({ persons, filter, deleteClicked }) => {\nconst filteredPersons = persons.filter((person) => person.name.toLowerCase().includes(filter.trim().toLowerCase()))\n\n  return (\n    <ul>\n      {filteredPersons.length ?\n        filteredPersons.map(person => <Person key={person.name} person={person} deleteClicked={deleteClicked} />)\n        : 'Add your first user!'}\n    </ul>\n  )\n}\n\nexport default Persons","import React from 'react'\n\nconst Filter = ({ filter, setFilter }) => {\n\n  return (\n    <div>\n        Filter by name: <input type=\"text\" value={filter} onChange={(e) => setFilter(e.target.value)} />\n    </div>\n  )\n}\n\nexport default Filter","import axios from 'axios'\n\nconst BASE_URL = '/api/persons'\n\nconst returnData = (res) => res.data\n\nconst getAll =  () => axios.get(BASE_URL).then(returnData)\n\nconst create = newObject => axios.post(BASE_URL, newObject).then(returnData)\n\nconst destroy = (id) => axios.delete(`${BASE_URL}/${id}`).then(returnData)\n\nconst update = (id, newObject) => axios.put(`${BASE_URL}/${id}`, newObject).then(returnData)\n\nexport default {\n    getAll,\n    create,\n    destroy,\n    update\n}","import React from 'react'\nimport phonebookService from '../services/phonebook'\n\n\n\nconst PersonForm = ({ newName, newPhone, setNewName, setNewPhone, persons, setPersons, setMessage }) => {\n\n  const addPerson = (e) => {\n    e.preventDefault()\n    const trimmedName = newName.trim();\n    const existingUser = persons.find(({ name }) => name.toLowerCase() === trimmedName.toLowerCase())\n    if (!trimmedName || !newPhone) {\n      return setMessage({content: `All fields are required`, type: \"error\"})\n    }\n    const newContact = {\n      name: trimmedName,\n      number: newPhone\n    }\n\n    setNewName('')\n    setNewPhone('')\n    if (existingUser) {\n      const replaceNumber = window.confirm(`${existingUser.name} is already added to phonebook, replace the old number with a new one?`)\n      if (replaceNumber) {\n        const updatedUser = { ...existingUser, number: newPhone }\n        phonebookService.update(existingUser.id, updatedUser).then((data) => {\n          console.log(data)\n          setPersons(persons.map((person) => person.id !== existingUser.id ? person : data))\n        })\n        setMessage({content: `Updated ${newContact.name}'s phone number`, type: \"success\"})\n        setTimeout(() => setMessage(null), 2000)\n      }\n    } else {\n     phonebookService.create(newContact).then(data => setPersons([...persons, data]));\n     setMessage({content: `Added ${newContact.name}`, type: \"success\"})\n     setTimeout(() => setMessage(null), 2000)\n    }\n  }\n\n  return (\n    <form>\n      <div>\n        name: <input type=\"text\" value={newName} onChange={(e) => setNewName(e.target.value)} />\n        phone: <input type=\"tel\" value={newPhone} onChange={(e) => setNewPhone(e.target.value)} />\n      </div>\n      <div>\n        <button type=\"submit\" onClick={addPerson}>add</button>\n      </div>\n    </form>\n  )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Notification = ({message}) => {\n  if (message === null) {\n    return null\n  }\n\n  const {\n      content,\n      type\n  } = message\n\n  return (\n    <div className={type}>\n      {content}\n    </div>\n  )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Notification from './components/Notification'\nimport phonebookService from './services/phonebook'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ filter, setFilter ] = useState('')\n  const [ newName, setNewName ] = useState('')\n  const [ newPhone, setNewPhone ] = useState('')\n  const [ message, setMessage ] = useState(null);\n\n  const popMessage = (message = {}, time = 2000) => {\n    setMessage(message)\n    setTimeout(() => setMessage(null), time)\n  }\n  useEffect(() => {\n    phonebookService.getAll().then((data) => setPersons(data))\n  }, [])\n\n  const deleteClicked = (id) => {\n    const confirmDelete = window.confirm(\"Are you sure you want to delete?\");\n\n    if (confirmDelete) {\n      phonebookService.destroy(id).then((data) => {\n        console.log(data);\n        setPersons(persons.filter((person) => person.id !== id));\n        popMessage({content: `Deleted user`, type: \"success\"})\n      }).catch((data) => {\n        setPersons(persons.filter((person) => person.id !== id));\n        popMessage({content: `User was already deleted.`, type: \"error\"})\n      })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Notification message={message} />\n        <Filter filter={filter} setFilter={setFilter} />\n        <PersonForm \n          newPhone={newPhone}\n          newName={newName}\n          setNewName={setNewName}\n          setNewPhone={setNewPhone}\n          persons={persons}\n          setPersons={setPersons}\n          setMessage={setMessage}\n        />\n      <h2>Numbers</h2>\n        <Persons persons={persons} filter={filter} deleteClicked={deleteClicked}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}